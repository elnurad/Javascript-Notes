i - ignore case while matching:
example: /somethingtosearch/i  

g - g flag can be used to search or extract a pattern more than once. 
example: let testStr = "Repeat, Repeat, Repeat"
         let repeatRegex = /Repeat/g;
         testStr.match(repeatRegex);
output: ["Repeat", "Repeat", "Repeat"];

. - wildcard character or dot or period. We can use it to search for any one character.
example: let humStr = "I'll hum a song";
         let hugStr = "Bear hug";
         let huRegex = /hu./;
         humStr.match(huRegex); //Returns ["hum"]
         hugStr.match(huRegex); //Returns ["hug"]
         
Character Classes: allow you to define a group of characters you wish to match by placing them inside [ ]
example: to match 'bag', 'big', 'bug':
/b[aiu]g/
- using hyphen (-) we can define a range of characters to match for. (ex: [a-e]) 
- we can create a set of characters that we don't want to match by using 'negated character set' for which we use ^.(ex: [^aeiou])

+ - we can use plus sign to match characters that appear one or more times in a row. 
* - asterisk or star symbol is used to match characters that appear zero or more times in a row.

         


Regex methods:
test() - checks whether the match exists, returns true or false.
match() - retrieves the matches while matching a regular expression against a string.

